[{"/home/d4mr/Documents/coding/projects/tabill/src/index.js":"1","/home/d4mr/Documents/coding/projects/tabill/src/reportWebVitals.js":"2","/home/d4mr/Documents/coding/projects/tabill/src/layouts/Home/Home.js":"3","/home/d4mr/Documents/coding/projects/tabill/src/components/FullPager.js":"4","/home/d4mr/Documents/coding/projects/tabill/src/providers/context.js":"5","/home/d4mr/Documents/coding/projects/tabill/src/providers/question-context.js":"6","/home/d4mr/Documents/coding/projects/tabill/src/providers/options-context.js":"7"},{"size":787,"mtime":1610118320328,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1610036609442,"results":"10","hashOfConfig":"9"},{"size":4459,"mtime":1610128342315,"results":"11","hashOfConfig":"9"},{"size":296,"mtime":1610118151676,"results":"12","hashOfConfig":"9"},{"size":422,"mtime":1610116662599,"results":"13","hashOfConfig":"9"},{"size":1114,"mtime":1610119440492,"results":"14","hashOfConfig":"9"},{"size":496,"mtime":1610129027100,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"s2lkgo",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/d4mr/Documents/coding/projects/tabill/src/index.js",[],["32","33"],"/home/d4mr/Documents/coding/projects/tabill/src/reportWebVitals.js",[],"/home/d4mr/Documents/coding/projects/tabill/src/layouts/Home/Home.js",["34","35","36","37","38","39","40","41"],"/home/d4mr/Documents/coding/projects/tabill/src/components/FullPager.js",[],"/home/d4mr/Documents/coding/projects/tabill/src/providers/context.js",[],"/home/d4mr/Documents/coding/projects/tabill/src/providers/question-context.js",["42","43"],"import React, { useState } from 'react';\nimport { useOptions } from './options-context';\n\nconst QuestionContext = React.createContext();\n\nfunction QuestionProvider(props) {\n    const { maxMultiple, tablesBeingAsked } = useOptions();\n    const [question, setQuestion] = useState(generateNewQuestion());\n\n    function generateNewQuestion() {\n        let a = tablesBeingAsked[randomIntFromInterval(0, tablesBeingAsked.length - 1)];\n        let b = randomIntFromInterval(1, maxMultiple);\n\n        return [a, b, a * b];\n    }\n\n    const nextQuestion = () => {\n        let newQuestion;\n        while (true) {\n            newQuestion = generateNewQuestion();\n            if (newQuestion[0] != question[0] || newQuestion[1] != question[1]) break;\n        }\n        setQuestion(newQuestion);\n    }\n\n\n    return <QuestionContext.Provider value={{ question, nextQuestion }} {...props} />\n}\n\nfunction randomIntFromInterval(min, max) { // min and max included \n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst useQuestion = () => React.useContext(QuestionContext);\nexport { QuestionProvider, useQuestion }","/home/d4mr/Documents/coding/projects/tabill/src/providers/options-context.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":24,"column":13,"nodeType":"50","messageId":"51","endLine":24,"endColumn":24},{"ruleId":"48","severity":1,"message":"52","line":24,"column":26,"nodeType":"50","messageId":"51","endLine":24,"endColumn":40},{"ruleId":"48","severity":1,"message":"53","line":24,"column":42,"nodeType":"50","messageId":"51","endLine":24,"endColumn":58},{"ruleId":"48","severity":1,"message":"54","line":24,"column":60,"nodeType":"50","messageId":"51","endLine":24,"endColumn":79},{"ruleId":"55","severity":1,"message":"56","line":74,"column":8,"nodeType":"57","endLine":74,"endColumn":22,"suggestions":"58"},{"ruleId":"59","severity":1,"message":"60","line":79,"column":32,"nodeType":"61","messageId":"62","endLine":79,"endColumn":34},{"ruleId":"59","severity":1,"message":"60","line":108,"column":168,"nodeType":"61","messageId":"62","endLine":108,"endColumn":170},{"ruleId":"59","severity":1,"message":"60","line":113,"column":201,"nodeType":"61","messageId":"62","endLine":113,"endColumn":203},{"ruleId":"59","severity":1,"message":"63","line":21,"column":32,"nodeType":"61","messageId":"62","endLine":21,"endColumn":34},{"ruleId":"59","severity":1,"message":"63","line":21,"column":65,"nodeType":"61","messageId":"62","endLine":21,"endColumn":67},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'maxMultiple' is assigned a value but never used.","Identifier","unusedVar","'setMaxMultiple' is assigned a value but never used.","'tablesBeingAsked' is assigned a value but never used.","'setTablesBeingAsked' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'moveToNextQuestion', 'showCorrectAnswer', 'streak', and 'timer'. Either include them or remove the dependency array. You can also do a functional update 'setStreak(s => ...)' if you only need 'streak' in the 'setStreak' call.","ArrayExpression",["66"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [answerStatus, moveToNextQuestion, showCorrectAnswer, streak, timer]",{"range":"69","text":"70"},[2524,2538],"[answerStatus, moveToNextQuestion, showCorrectAnswer, streak, timer]"]